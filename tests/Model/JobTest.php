<?php

declare(strict_types=1);

/**
 * This file is part of the MultiFlexi package
 *
 * https://multiflexi.eu/
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 * The version of the OpenAPI document: 1.0.0
 * Contact: vitezslav.dvorak@spojenet.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git.
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace MultiFlexi\Api\Model;

use PHPUnit\Framework\TestCase;

/**
 * JobTest Class Doc Comment.
 *
 * @author  OpenAPI Generator team
 *
 * @see    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \MultiFlexi\Api\Model\Job
 */
class JobTest extends TestCase
{
    /**
     * Setup before running any test cases.
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Clean up after running all test cases.
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Setup before running each test case.
     */
    protected function setUp(): void
    {
    }

    /**
     * Clean up after running each test case.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Test "Job".
     */
    public function testJob(): void
    {
        $testJob = new Job();
        $namespacedClassname = Job::getModelsNamespace().'\\Job';
        $this->assertSame('\\'.Job::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname),
        );
        self::markTestIncomplete(
            'Test of "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "id".
     */
    public function testPropertyId(): void
    {
        self::markTestIncomplete(
            'Test of "id" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "appId".
     */
    public function testPropertyAppId(): void
    {
        self::markTestIncomplete(
            'Test of "appId" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "begin".
     */
    public function testPropertyBegin(): void
    {
        self::markTestIncomplete(
            'Test of "begin" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "end".
     */
    public function testPropertyEnd(): void
    {
        self::markTestIncomplete(
            'Test of "end" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "companyId".
     */
    public function testPropertyCompanyId(): void
    {
        self::markTestIncomplete(
            'Test of "companyId" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "exitcode".
     */
    public function testPropertyExitcode(): void
    {
        self::markTestIncomplete(
            'Test of "exitcode" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "stdout".
     */
    public function testPropertyStdout(): void
    {
        self::markTestIncomplete(
            'Test of "stdout" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "stderr".
     */
    public function testPropertyStderr(): void
    {
        self::markTestIncomplete(
            'Test of "stderr" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "launchedBy".
     */
    public function testPropertyLaunchedBy(): void
    {
        self::markTestIncomplete(
            'Test of "launchedBy" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "env".
     */
    public function testPropertyEnv(): void
    {
        self::markTestIncomplete(
            'Test of "env" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "command".
     */
    public function testPropertyCommand(): void
    {
        self::markTestIncomplete(
            'Test of "command" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "schedule".
     */
    public function testPropertySchedule(): void
    {
        self::markTestIncomplete(
            'Test of "schedule" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "executor".
     */
    public function testPropertyExecutor(): void
    {
        self::markTestIncomplete(
            'Test of "executor" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "runtemplateId".
     */
    public function testPropertyRuntemplateId(): void
    {
        self::markTestIncomplete(
            'Test of "runtemplateId" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test attribute "appVersion".
     */
    public function testPropertyAppVersion(): void
    {
        self::markTestIncomplete(
            'Test of "appVersion" property in "Job" model has not been implemented yet.',
        );
    }

    /**
     * Test getOpenApiSchema static method.
     *
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema(): void
    {
        $schemaArr = Job::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}
